// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PhraseSDK
import Foundation
@_exported import PhraseSDK
import Swift
import UIKit
import _Concurrency
public protocol PhraseError : Swift.Error {
}
public enum PhraseSetupError : PhraseSDK.PhraseError {
  case notInitialized
  case missingDistributionID
  case missingEnvironmentSecret
  case appVersionNotSemantic(underlyingError: Swift.Error)
}
extension PhraseSDK.PhraseSetupError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhraseSemanticVersionError : PhraseSDK.PhraseError {
  case appVersionOverrideNotSemantic
  case missingCFBundleShortVersionString
  case missingCFBundleVersion
  case cannotComposeSemanticVersion
  public static func == (a: PhraseSDK.PhraseSemanticVersionError, b: PhraseSDK.PhraseSemanticVersionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PhraseSDK.PhraseSemanticVersionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhraseInternalError : PhraseSDK.PhraseError {
  case dataUrlError
  case apiUrlError
  case selfIsNil
  case inconsistentUpdate
  case versionStorageUnavailable
  case unknownError(underlyingError: Swift.Error)
}
extension PhraseSDK.PhraseInternalError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhraseNetworkError : PhraseSDK.PhraseError {
  case connectionError(underlyingError: Swift.Error)
  case responseNotHTTP
  case responseUrlMissing
  case distributionNotFound
  case missingReleaseVersion
  case responseStatusInvalid(code: Swift.Int, message: Swift.String)
  case responseDataInvalid
}
extension PhraseSDK.PhraseNetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct PhraseUpdateError : PhraseSDK.PhraseError {
  public let underlyingErrors: [Swift.Error]
  public var last: Swift.Error? {
    get
  }
}
extension PhraseSDK.PhraseUpdateError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Phrase : ObjectiveC.NSObject {
  @objc final public var configuration: PhraseSDK.PhraseConfiguration
  @objc public static let shared: PhraseSDK.Phrase
  @objc final public let sdkVersion: Swift.String
  @objc final public func setup(distributionID: Swift.String, environmentSecret: Swift.String)
  @objc final public func localizedString(forKey key: Swift.String, value: Swift.String?, table tableName: Swift.String?) -> Swift.String
  @objc final public func clearCache()
  @objc final public var downloadedLanguages: [Swift.String] {
    @objc get
  }
  @objc final public var currentLanguageCode: Swift.String {
    @objc get
  }
  @objc deinit
}
extension PhraseSDK.Phrase {
  @available(*, deprecated, renamed: "updateTranslation")
  final public func updateTranslations(completionHandler: ((Swift.Result<Swift.Bool, PhraseSDK.PhraseUpdateError>) -> Swift.Void)? = nil) throws
  @available(swift, obsoleted: 1.0)
  @available(*, deprecated, renamed: "updateTranslation")
  @objc final public func updateTranslations(completionHandler: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers @objc final public class PhraseConfiguration : ObjectiveC.NSObject {
  @objc final public var debugMode: Swift.Bool
  @objc final public var timeout: Foundation.TimeInterval
  @objc final public var appVersionOverride: Swift.String?
  @objc final public var localeOverride: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension PhraseSDK.Phrase {
  final public func updateTranslation(completionHandler: ((Swift.Result<Swift.Bool, PhraseSDK.PhraseUpdateError>) -> Swift.Void)? = nil) throws
  final public func updateTranslation(for languageCode: Swift.String, completionHandler: ((Swift.Result<Swift.Bool, PhraseSDK.PhraseUpdateError>) -> Swift.Void)? = nil) throws
}
extension PhraseSDK.PhraseSemanticVersionError : Swift.Equatable {}
extension PhraseSDK.PhraseSemanticVersionError : Swift.Hashable {}
