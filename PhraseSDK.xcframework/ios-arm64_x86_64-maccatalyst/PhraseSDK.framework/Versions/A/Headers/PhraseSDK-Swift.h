#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef PHRASESDK_SWIFT_H
#define PHRASESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PhraseSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class PhraseConfiguration;
@class NSString;

/// The Phrase Over the Air (OTA) SDK class. Please use the <code>Phrase.shared</code> instance as your entry point.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
SWIFT_CLASS("_TtC9PhraseSDK6Phrase")
@interface Phrase : NSObject
@property (nonatomic, strong) PhraseConfiguration * _Nonnull configuration;
/// Hidden initialization method for shared instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The shared instance of the Phrase Over the Air (OTA) SDK class. Please use this as your entry point.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Phrase * _Nonnull shared;)
+ (Phrase * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns the version of the currently used Phrase Over the Air (OTA) SDK.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Method to setup the Phrase SDK. Please use this to configure the SDK before using it.
/// After setup simply call <code>PhraseApp.shared.updateTranslation()</code> to update
/// your localization files. We recommend to invoke both functions within your <code>AppDelegate</code>
/// in the <code>application(_:didFinishLaunchingWithOptions:)</code> method.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
/// \param distributionID Your distribution ID.
///
/// \param environmentSecret Your environment secret.
/// Use your development or production secret depending on your type of release.
///
- (void)setupWithDistributionID:(NSString * _Nonnull)distributionID environmentSecret:(NSString * _Nonnull)environmentSecret;
/// Returns a localized version of the string designated by the specified key and residing in the specified table.
/// It tries to use the translation received from the Phrase Over the Air (OTA) SDK.
/// If no translation is found, the default implementation is used as fallback.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
/// \param key The <code>key</code> for a string in the table identified by <code>tableName</code>.
///
/// \param value The value to return if <code>key</code> is <code>nil</code> or if a localized string for
/// <code>key</code> can’t be found in the <code>table</code>.
///
/// \param tableName The receiver’s string <code>table</code> to search. If <code>tableName</code> is
/// <code>nil</code> or is an empty string, the method attempts to use the table in <code>Localizable.strings</code>.
///
///
/// returns:
///
/// A localized version of the string designated by <code>key</code> in table <code>tableName</code>.
/// This method returns the following when <code>key</code> is <code>nil</code> or not found in <code>table</code>:
/// <ul>
///   <li>
///     If <code>key</code> is <code>nil</code> and value is <code>nil</code>, returns an empty string.
///   </li>
///   <li>
///     If <code>key</code> is <code>nil</code> and value is non-<code>nil</code>, returns <code>value</code>.
///   </li>
///   <li>
///     If <code>key</code> is not found and value is <code>nil</code> or an empty string, returns <code>key</code>.
///   </li>
///   <li>
///     If <code>key</code> is not found and value is non-<code>nil</code> and not empty, return <code>value</code>.
///   </li>
/// </ul>
- (NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName SWIFT_WARN_UNUSED_RESULT;
/// Method to remove all translations downloaded by the Phrase Over the Air (OTA) SDK.
/// No version will be kept and <code>updateTranslation()</code> must be called to make them
/// available again.
/// warning:
/// Please use with caution, e.g. do not use during a running update.
- (void)clearCache;
/// Returns an unordered list of all available and currently valid languages
/// previously downloaded by the Phrase Over the Air (OTA) SDK.
/// For information purposes only.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull downloadedLanguages;
/// Returns the current language code as determined by the Phrase Over the Air (OTA) SDK.
/// For information purposes only.
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLanguageCode;
@end


@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
@end



@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
/// Updates the translations for the current language from the Phrase Over the Air (OTA) server.
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationsWithCompletionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("", "updateTranslationWithCompletionHandler:");
@end



@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
/// Updates the translations for the current language from the Phrase Over the Air (OTA) server.
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationWithCompletionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Updates the translations for the given language from the Phrase Over the Air (OTA) server.
/// \param languageCode The language code to use when requesting a translation.
///
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationFor:(NSString * _Nonnull)languageCode completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
@end


@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
@end


/// The API host configuration.
typedef SWIFT_ENUM(NSInteger, PhraseAPIHosts, open) {
/// The default API host.
  PhraseAPIHostsDefault = 0,
/// The US API host.
  PhraseAPIHostsUs = 1,
};


/// The configuration for the Phrase Over the Air (OTA) SDK.
/// Modify values using <code>Phrase.shared.configuration</code>.
SWIFT_CLASS("_TtC9PhraseSDK19PhraseConfiguration")
@interface PhraseConfiguration : NSObject
/// Enables the debug mode of the Phrase Over the Air (OTA) SDK when set to <code>true</code>.
@property (nonatomic) BOOL debugMode;
/// The timeout for the network requests made by the SDK.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
/// Once <code>updateTranslation()</code> is called, the SDK ignores any changes you make
/// to this value.
/// Defaults to 10 Seconds.
@property (nonatomic) NSTimeInterval timeout;
/// The provided override for the App version used to return a release which matches
/// the release constraints for the min and max version. Must be semantic.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code> and
/// before accessing localized strings that might be downloaded by the SDK.
@property (nonatomic, copy) NSString * _Nullable appVersionOverride;
/// Disable iOS Bundle caching for downloaded translations by adding <code>.nocache</code> to
/// files.
/// Defaults to <code>false</code>.
/// Enabling is not recommended as this may affect performance, e.g. with tables.
/// This option affects both saving and retrieving translations, e.g.
/// if translations have been updated with the cache disabled, they will not be returned
/// if caching is enabled afterwards.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code> and
/// before accessing localized strings that might be downloaded by the SDK.
@property (nonatomic) BOOL disableCaching;
/// The override for the language/locale code to use.
/// This overrides which language/locale is used for the localization and the default
/// update method.
/// Set to <code>nil</code> to revert to the default handling again.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
/// note:
/// System dialogs provided by Apple will still use the best matching preferred
/// language supported by your project.
@property (nonatomic, copy) NSString * _Nullable localeOverride;
/// This controls whether the internal fallback that looks for translations in the
/// main bundle ignores tables other than <code>Localizable</code>. Please use only if your use
/// case requires it.
/// Set to <code>false</code> to revert to the default handling again.
/// Must be set before calls to <code>NSLocalizedString</code> or <code>.localizedString(:)</code>.
@property (nonatomic) BOOL ignoreOtherTables;
/// The override for the API host to use.
/// This overrides which API host is used for the localization.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
@property (nonatomic) enum PhraseAPIHosts apiHost;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef PHRASESDK_SWIFT_H
#define PHRASESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PhraseSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class PhraseConfiguration;
@class NSString;

/// The Phrase Over the Air (OTA) SDK class. Please use the <code>Phrase.shared</code> instance as your entry point.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
SWIFT_CLASS("_TtC9PhraseSDK6Phrase")
@interface Phrase : NSObject
@property (nonatomic, strong) PhraseConfiguration * _Nonnull configuration;
/// Hidden initialization method for shared instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The shared instance of the Phrase Over the Air (OTA) SDK class. Please use this as your entry point.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Phrase * _Nonnull shared;)
+ (Phrase * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns the version of the currently used Phrase Over the Air (OTA) SDK.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Method to setup the Phrase SDK. Please use this to configure the SDK before using it.
/// After setup simply call <code>PhraseApp.shared.updateTranslation()</code> to update
/// your localization files. We recommend to invoke both functions within your <code>AppDelegate</code>
/// in the <code>application(_:didFinishLaunchingWithOptions:)</code> method.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
/// \param distributionID Your distribution ID.
///
/// \param environmentSecret Your environment secret.
/// Use your development or production secret depending on your type of release.
///
- (void)setupWithDistributionID:(NSString * _Nonnull)distributionID environmentSecret:(NSString * _Nonnull)environmentSecret;
/// Returns a localized version of the string designated by the specified key and residing in the specified table.
/// It tries to use the translation received from the Phrase Over the Air (OTA) SDK.
/// If no translation is found, the default implementation is used as fallback.
/// note:
///
/// Head over to the <a href="https://help.phrase.com/help/phrase-over-the-air-introduction">Phrase Help Center</a>
/// to learn more about the Phrase Over the Air (OTA) SDK and how to use it in your apps.
/// \param key The <code>key</code> for a string in the table identified by <code>tableName</code>.
///
/// \param value The value to return if <code>key</code> is <code>nil</code> or if a localized string for
/// <code>key</code> can’t be found in the <code>table</code>.
///
/// \param tableName The receiver’s string <code>table</code> to search. If <code>tableName</code> is
/// <code>nil</code> or is an empty string, the method attempts to use the table in <code>Localizable.strings</code>.
///
///
/// returns:
///
/// A localized version of the string designated by <code>key</code> in table <code>tableName</code>.
/// This method returns the following when <code>key</code> is <code>nil</code> or not found in <code>table</code>:
/// <ul>
///   <li>
///     If <code>key</code> is <code>nil</code> and value is <code>nil</code>, returns an empty string.
///   </li>
///   <li>
///     If <code>key</code> is <code>nil</code> and value is non-<code>nil</code>, returns <code>value</code>.
///   </li>
///   <li>
///     If <code>key</code> is not found and value is <code>nil</code> or an empty string, returns <code>key</code>.
///   </li>
///   <li>
///     If <code>key</code> is not found and value is non-<code>nil</code> and not empty, return <code>value</code>.
///   </li>
/// </ul>
- (NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName SWIFT_WARN_UNUSED_RESULT;
/// Method to remove all translations downloaded by the Phrase Over the Air (OTA) SDK.
/// No version will be kept and <code>updateTranslation()</code> must be called to make them
/// available again.
/// warning:
/// Please use with caution, e.g. do not use during a running update.
- (void)clearCache;
/// Returns an unordered list of all available and currently valid languages
/// previously downloaded by the Phrase Over the Air (OTA) SDK.
/// For information purposes only.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull downloadedLanguages;
/// Returns the current language code as determined by the Phrase Over the Air (OTA) SDK.
/// For information purposes only.
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLanguageCode;
@end


@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
@end



@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
/// Updates the translations for the current language from the Phrase Over the Air (OTA) server.
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationsWithCompletionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("", "updateTranslationWithCompletionHandler:");
@end



@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
/// Updates the translations for the current language from the Phrase Over the Air (OTA) server.
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationWithCompletionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Updates the translations for the given language from the Phrase Over the Air (OTA) server.
/// \param languageCode The language code to use when requesting a translation.
///
/// \param completionHandler 
/// The completionHandler returns a <code>Bool</code> which is <code>true</code> if translations were successfully updated.
/// Errors during the update are returned as <code>Error?</code>.
///
///
/// throws:
/// A <code>PhraseSetupError</code> if the SDK is not set up correctly and a
/// <code>PhraseInternalError</code> in case of malfunction.
- (void)updateTranslationFor:(NSString * _Nonnull)languageCode completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
@end


@interface Phrase (SWIFT_EXTENSION(PhraseSDK))
@end


/// The API host configuration.
typedef SWIFT_ENUM(NSInteger, PhraseAPIHosts, open) {
/// The default API host.
  PhraseAPIHostsDefault = 0,
/// The US API host.
  PhraseAPIHostsUs = 1,
};


/// The configuration for the Phrase Over the Air (OTA) SDK.
/// Modify values using <code>Phrase.shared.configuration</code>.
SWIFT_CLASS("_TtC9PhraseSDK19PhraseConfiguration")
@interface PhraseConfiguration : NSObject
/// Enables the debug mode of the Phrase Over the Air (OTA) SDK when set to <code>true</code>.
@property (nonatomic) BOOL debugMode;
/// The timeout for the network requests made by the SDK.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
/// Once <code>updateTranslation()</code> is called, the SDK ignores any changes you make
/// to this value.
/// Defaults to 10 Seconds.
@property (nonatomic) NSTimeInterval timeout;
/// The provided override for the App version used to return a release which matches
/// the release constraints for the min and max version. Must be semantic.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code> and
/// before accessing localized strings that might be downloaded by the SDK.
@property (nonatomic, copy) NSString * _Nullable appVersionOverride;
/// Disable iOS Bundle caching for downloaded translations by adding <code>.nocache</code> to
/// files.
/// Defaults to <code>false</code>.
/// Enabling is not recommended as this may affect performance, e.g. with tables.
/// This option affects both saving and retrieving translations, e.g.
/// if translations have been updated with the cache disabled, they will not be returned
/// if caching is enabled afterwards.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code> and
/// before accessing localized strings that might be downloaded by the SDK.
@property (nonatomic) BOOL disableCaching;
/// The override for the language/locale code to use.
/// This overrides which language/locale is used for the localization and the default
/// update method.
/// Set to <code>nil</code> to revert to the default handling again.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
/// note:
/// System dialogs provided by Apple will still use the best matching preferred
/// language supported by your project.
@property (nonatomic, copy) NSString * _Nullable localeOverride;
/// This controls whether the internal fallback that looks for translations in the
/// main bundle ignores tables other than <code>Localizable</code>. Please use only if your use
/// case requires it.
/// Set to <code>false</code> to revert to the default handling again.
/// Must be set before calls to <code>NSLocalizedString</code> or <code>.localizedString(:)</code>.
@property (nonatomic) BOOL ignoreOtherTables;
/// The override for the API host to use.
/// This overrides which API host is used for the localization.
/// Must be set before calling <code>PhraseApp.shared.updateTranslation()</code>.
@property (nonatomic) enum PhraseAPIHosts apiHost;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
